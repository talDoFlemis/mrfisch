generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_DEV")
}

model Link {
  id        String   @id @default(cuid())
  title     String
  url       String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("links")
}

model Comment {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  codeId      String
  code        Code     @relation(fields: [codeId], references: [id], onDelete: Cascade)
  inserted_at DateTime @default(now())
  updated_at  DateTime @updatedAt
  block       String

  @@map("comments")
}

model Code {
  id            String    @id @default(cuid())
  userId        String?
  inserted_at   DateTime  @default(now())
  updated_at    DateTime  @default(now())
  code_title    String
  description   String?
  code_block    String
  language      Languages
  documentation String?
  number_views  Int       @default(0)
  tags          String[]
  user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorited_by  User[]    @relation("favorite_codes")
  comments      Comment[]
  associatedBy  Code[]    @relation("associated_codes")
  associatedTo  Code[]    @relation("associated_codes")

  @@index([userId])
  @@map("codes")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  isNew          Boolean   @default(true)
  role           Role      @default(NORMAL)
  accounts       Account[]
  codes          Code[]
  sessions       Session[]
  favorite_codes Code[]    @relation("favorite_codes")
  comments       Comment[]
  links          Link[]

  @@map("users")
}

enum Role {
  NORMAL
  PORTULOVER
}

enum Languages {
  makefile
  javascript
  python
  css
  c
  cpp
  dockerfile
  rust
  haskell
  ruby
  bash
  typescript
  yaml
}
