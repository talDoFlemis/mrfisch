generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Link {
  id        String   @id @default(cuid())
  title     String
  url       String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Code {
  id            String   @id @default(cuid())
  userId        String?
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  codeTitle     String   @db.Text
  description   String?
  codeBlock     String
  language      String
  documentation String?  @db.Text
  numberOfHits  Int      @default(0)
  tags          Tag[]    

  @@index([userId])
}

model Tag {
  id      String @id @default(cuid())
  tagName String
  codes   Code[] 

  @@index([tagName])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  links         Link[]
  role          Role      @default(NORMAL)
  favoriteCodes Code[]
  isNew         Boolean   @default(true)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CodeToTag {
  A String
  B String

  @@unique([A, B], map: "_CodeToTag_AB_unique")
  @@index([B], map: "_CodeToTag_B_index")
  @@map("_CodeToTag")
}

enum Role {
  NORMAL
  PORTULOVER
}
